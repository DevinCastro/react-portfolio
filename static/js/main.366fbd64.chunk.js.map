{"version":3,"sources":["pages/Home/Home.js","components/Project/Project.js","pages/Portfolio/Portfolio.js","pages/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","id","className","Button","target","href","src","alt","Project","props","useState","modal","setModal","toggle","Jumbotron","name","technology","description","color","link","repo","onClick","Modal","isOpen","ModalHeader","ModalBody","image","ModalFooter","Portfolio","Container","Contact","Form","FormGroup","Label","for","Input","type","placeholder","App","setIsOpen","Navbar","light","expand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","to","exact","path","component","NavbarText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.366fbd64.chunk.js","sourcesContent":["import React from 'react'\nimport '../../index.css'\nimport { Button } from 'reactstrap'\n\n\n\nconst Home = () => {\n  return (\n    <>\n      <section>\n        <h1 id=\"intro\">\n          Hello, I'm <span className=\"devincastro\">Devin Castro</span> and I am a full-stack web developer.\n          <br />\n          <Button className='button'>\n            <a target=\"_blank\" href=\"https://www.linkedin.com/in/devin-castro-17a62bba/\">\n              <img className=\"logo\" src=\"https://image.flaticon.com/icons/png/512/61/61109.png\" alt=\"linkedin\"/>\n            </a>\n          </Button>\n          <Button className='button'>\n            <a target=\"_blank\" href=\"https://github.com/DevinCastro\">\n              <img className=\"logo\" src=\"https://cdn.iconscout.com/icon/free/png-256/github-153-675523.png\" alt=\"github\" />\n            </a>\n          </Button>\n        </h1>\n        \n      </section>\n    </>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { Jumbotron, Button } from 'reactstrap'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n\n\nconst Project = props => {\n\n  const [modal, setModal] = useState(false)\n  \n  const toggle = () => setModal(!modal)\n\n  return (\n    <>\n      <div>\n        <Jumbotron>\n          <h1 className=\"display-3\">{props.name}</h1>\n          <p className=\"lead\">{props.technology}</p>\n          <hr className=\"my-2\" />\n          <p>{props.description}</p>\n          <p className=\"lead\">\n            <Button color=\"primary\">\n              <a className=\"deployedLink\" href={props.link} target='_blank'>Link to App</a>\n            </Button>{' '}\n            <Button color=\"primary\">\n              <a className=\"deployedLink\" href={props.repo} target='_blank'>Link to Repo</a>\n            </Button>\n          </p>\n\n          <p>\n            <div>\n              <Button color=\"danger\" onClick={toggle}>Photo</Button>\n              <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader toggle={toggle}>{props.name}</ModalHeader>\n                <ModalBody>\n                  <img className=\"projectPhoto\" src={props.image} alt={props.name}/>\n                </ModalBody>\n                <ModalFooter>\n                  <Button color=\"secondary\" onClick={toggle}>Close</Button>\n                </ModalFooter>\n              </Modal>\n            </div>\n          </p>\n\n        </Jumbotron>\n      </div>\n    </>\n  )\n}\n\nexport default Project","import React from 'react'\nimport Project from '../../components/Project'\nimport { Container } from 'reactstrap';\n\nconst Portfolio = () => {\n  return (\n    <>\n      <Container>\n\n        <h1 className=\"myWork\">My Work</h1>\n        <Project\n          name={'Busks in Town'}\n          technology={'This application uses node and express to set up the server and utilizes a mySQL database. '}\n          description={'Busks in town allows a user to create an artist account filled with their photo, bio, genre, bio, and social media links.  Then that artist can create upcoming concerts and post when and where those concerts will be held!'}\n          link={'https://guarded-crag-60613.herokuapp.com/'}\n          repo={'https://github.com/datrimboli/BusksInTown'}\n          image={'./photos/busks.png'}\n\n        />\n\n        <Project\n          name={'Fitness Tracker'}\n          technology={'This full stack application uses, node.js and express to create the server. We are using mongoDB and mongoose for our database. The application is deployed with heroku.'}\n          description={'This application allows a user to log their workouts everyday. They can create new workouts and add which exercises they include in that workout. They can pick up a workout where they left off, and lastly they can view their stats from all of the previous workouts organized by some graphs and pie charts.'}\n          link={'https://thawing-bayou-03032.herokuapp.com/'}\n          repo={'https://github.com/DevinCastro/workout-tracker'}\n          image={'./photos/fitness.png'}\n\n        />\n\n        <Project\n          name={'Online - offline budget tracker'}\n          technology={'This full stack application uses, node.js and express to create the server. We are using mongoDB and mongoose for our database. We also use a manifest.json file, a service-worker, and an indexDB file to allow us to cache all our data and use the application offline.'}\n          description={'This application allows a user to log and track their expensives. This is also a progressive web application and still mantains functionality if you are using it offline.'}\n          link={'https://glacial-bastion-76923.herokuapp.com/'}\n          repo={'https://github.com/DevinCastro/Online-offline-budget-tracker'}\n          image={'./photos/budget.png'}\n\n        />\n\n        <Project\n          name={'React Portfolio'}\n          technology={'This is a React application.'}\n          description={'This is the current application you are looking at right now.  Using react to render everything on the front end and reactstrap to sytle everything'}\n          link={'http://DevinCastro.github.io/react-portfolio'}\n          repo={'https://github.com/DevinCastro/react-portfolio'}\n          image={'./photos/portfolio.png'}\n\n        />\n\n        <Project\n          name={'Note Taker'}\n          technology={'This application uses an express server and Node.'}\n          description={'This is a simple note taking application. The User can add any number of notes organized by a title and save it. They can view previously written notes and then they can delete them.'}\n          link={'https://desolate-ravine-80676.herokuapp.com/'}\n          repo={'https://github.com/DevinCastro/note-taker'}\n          image={'./photos/notetaker.png'}\n\n        />\n\n\n        <Project\n          name={'Poke Project'}\n          technology={'This is a purely front end web application.'}\n          description={'This application allows a user to find pokemon data based on the search of any pokemon name.  Then the user can find pokemon cards based on a name or type search.  Lastly we are able to play a pokemon trivia where you guess the name of a hidden pokemon.'}\n          link={'https://kalynbsimms.github.io/pokeProject/'}\n          repo={'https://github.com/Kalynbsimms/pokeProject'}\n          image={'./photos/pokemonImg.png'}\n\n        />\n\n\n\n      </Container>\n    </>\n  )\n}\n\nexport default Portfolio\n","import React from 'react'\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Container\n} from 'reactstrap'\n\nconst Contact = () => {\n  return (\n    <Container>\n          <Form>\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input type=\"test\" name=\"name\" placeholder=\"John Doe\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleEmail\">Email</Label>\n              <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"johndoe@gmail.com\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"message\">Message</Label>\n              <Input type=\"text\" name=\"Enter your message\" />\n            </FormGroup>\n            <Button>Submit</Button>\n          </Form>\n\n          <br/>\n\n        <a className=\"resume\" target=\"_blank\" href=\"https://drive.google.com/file/d/1ndE82WoBnJDtFSzsTgw4Pq5GcVtk2GzX/view?usp=sharing\">\n        <Button color=\"danger\" className=\"myWork\">\n          My Resume\n        </Button>\n        </a>\n    </Container>\n  )\n}\n\nexport default Contact","import React, { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Portfolio from './pages/Portfolio'\nimport Contact from './pages/Contact'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavbarText,\n  NavItem,\n  NavLink\n} from 'reactstrap'\n\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Router>\n      <nav>\n        <Navbar color=\"dark\" light expand=\"md\">\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink><Link to=\"/\">Home</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link to=\"/portfolio\">Portfolio</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link to=\"/contact\">Contact</Link></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/portfolio\" component={Portfolio} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n      </nav>\n\n      <footer className=\"fixed-bottom\">\n        <Navbar color=\"light\" light expand=\"md\">\n\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink target=\"_blank\"\n                  href=\"https://drive.google.com/file/d/1ndE82WoBnJDtFSzsTgw4Pq5GcVtk2GzX/view?usp=sharing\">My Resume</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink target=\"_blank\" href=\"https://github.com/DevinCastro\">GitHub</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink target=\"_blank\" href=\"https://www.linkedin.com/in/devin-castro-17a62bba/\">LinkedIn</NavLink>\n              </NavItem>\n\n            </Nav>\n            <NavbarText>Devin Castro</NavbarText>\n          </Collapse>\n        </Navbar>\n      </footer>\n    </Router>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}